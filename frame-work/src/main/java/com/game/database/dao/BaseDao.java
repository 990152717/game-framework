/*
 * Copyright 2016-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.game.database.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.game.database.DBHelper;
import com.game.database.DBParamWrapper;
import com.game.database.DataReader;

/**
 * @author leesin
 *
 */
public abstract class BaseDao<T>
{
    protected static final Logger LOGGER = LoggerFactory.getLogger(BaseDao.class);

    /**
     * 数据库Helper
     */
    protected DBHelper dbhelper;

    public BaseDao(DBHelper helper)
    {
        this.dbhelper = helper;
    }

    protected DBHelper getDBHelper()
    {
        return dbhelper;
    }

    /**
     * 根据脚本执行更新
     * 
     * @param sql
     *            查询的脚本
     * @param paramWrapper
     *            参数
     * @return update result
     */
    public boolean update(String sql, DBParamWrapper paramWrapper)
    {
        return getDBHelper().execNoneQuery(sql, paramWrapper) > -1;
    }

    /**
     * 根据脚本执行自增添加
     * 
     * @param sql
     *            查询的脚本
     * @param paramWrapper
     *            参数
     * @return add result
     */
    public int add(String sql, DBParamWrapper paramWrapper)
    {
        return getDBHelper().execAutoGeneratedKey(sql, paramWrapper);
    }

    public void close(Statement statement) throws SQLException
    {
        statement.clearBatch();
        statement.close();
    }

    /**
     * 根据脚本执行查询操作，不带参数
     * 
     * @param sql
     *            sql
     * @return query entity
     */
    public T query(String sql)
    {
        return query(sql, null);
    }

    /**
     * 根据脚本执行查询操作，带参数
     * 
     * @param sql
     *            查询的脚本
     * @param paramWrapper
     *            参数
     * @return query entity
     */
    public T query(String sql, DBParamWrapper paramWrapper)
    {
        return getDBHelper().executeQuery(sql, paramWrapper, (DataReader<T>) (rs, objects) -> {
            if (rs.last())
            {
                return this.rsToEntity(rs);
            }
            return null;
        });
    }

    /**
     * 根据脚本执行查询操作,不带参数
     * 
     * @param sql
     *            查询的脚本
     * @return list entities
     */
    public List<T> queryList(String sql)
    {
        return queryList(sql, null);
    }

    /**
     * 根据脚本执行查询操作
     * 
     * @param sql
     *            sql 查询的脚本
     * @param paramWrapper
     *            参数
     * @return 返回查询结果对象集合
     */
    public List<T> queryList(String sql, DBParamWrapper paramWrapper)
    {
        return getDBHelper().executeQuery(sql, paramWrapper,
                (DataReader<List<T>>) (rs, objects) -> BaseDao.this.rsToEntityList(rs));
    }

    /**
     * 将ResultSet转换成List
     * 
     * @param rs
     *            result set
     * @return list entities
     */
    protected List<T> rsToEntityList(ResultSet rs)
    {
        List<T> entities = new ArrayList<>();
        if (rs != null)
        {
            try
            {
                while (rs.next())
                {
                    T entity = rsToEntity(rs);
                    entities.add(entity);
                }
            }
            catch (Exception e)
            {
                LOGGER.error("Result set translate error: ", e);
            }
        }
        return entities;
    }

    /**
     * 将result set转为实体对象
     * 
     * @param rs
     *            result set
     * @return result bean
     * @throws SQLException
     *             if translate error
     */
    protected abstract T rsToEntity(ResultSet rs) throws SQLException;
}
