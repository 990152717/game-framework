/*
 * BaseDao
 *
 * 2016年2月17日
 *
 * All rights reserved. This material is confidential and proprietary to Jacken
 */
package com.game.database.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.game.database.DBHelper;
import com.game.database.DBParamWrapper;
import com.game.database.DataReader;

/**
 * @author jacken
 *
 */
public abstract class BaseDao<T>
{
    /**
     * 数据库Helper
     */
    protected DBHelper dbhelper = null;
    protected static final Logger LOGGER = LoggerFactory.getLogger(BaseDao.class);

    public BaseDao(DBHelper helper)
    {
        this.dbhelper = helper;
    }

    protected DBHelper getDBHelper()
    {
        return dbhelper;
    }

    /**
     * 根据脚本执行更新
     * 
     * @param sql
     *            查询的脚本
     * @param paramWrapper
     *            参数
     * @return
     */
    public boolean update(String sql, DBParamWrapper paramWrapper)
    {
        boolean result = false;
        result = getDBHelper().execNoneQuery(sql, paramWrapper) > -1 ? true
                : false;
        return result;
    }

    /**
     * 根据脚本执行自增添加
     * 
     * @param sql
     *            查询的脚本
     * @param paramWrapper
     *            参数
     * @return
     */
    public int add(String sql, DBParamWrapper paramWrapper)
    {
        return getDBHelper().execAutoGeneratedKey(sql, paramWrapper);
    }

    public void close(Statement statement) throws SQLException
    {
        statement.clearBatch();
        statement.close();
        statement = null;
    }

    /**
     * 根据脚本执行查询操作，不带参数
     * 
     * @param sql
     * @return
     */
    public T query(String sql)
    {
        return query(sql, null);
    }

    /**
     * 根据脚本执行查询操作，带参数
     * 
     * @param sql
     *            查询的脚本
     * @param paramWrapper
     *            参数
     * @return
     */
    public T query(String sql, DBParamWrapper paramWrapper)
    {
        T result = getDBHelper().executeQuery(sql, paramWrapper,
                new DataReader<T>()
                {
                    @Override
                    public T readData(ResultSet rs, Object... objects)
                            throws Exception
                    {
                        if (rs.last())
                        {
                            return BaseDao.this.rsToEntity(rs);
                        }
                        return null;
                    }
                });
        return result;
    }

    /**
     * 根据脚本执行查询操作,不带参数
     * 
     * @param sql
     *            查询的脚本
     * @return
     */
    public List<T> queryList(String sql)
    {
        return queryList(sql, null);
    }

    /**
     * 根据脚本执行查询操作
     * 
     * @param sql
     *            sql 查询的脚本
     * @param paramWrapper
     *            参数
     * @return 返回查询结果对象集合
     */
    public List<T> queryList(String sql, DBParamWrapper paramWrapper)
    {
        List<T> entitis = getDBHelper().executeQuery(sql, paramWrapper,
                new DataReader<List<T>>()
                {

                    @Override
                    public List<T> readData(ResultSet rs, Object... objects)
                            throws Exception
                    {
                        return BaseDao.this.rsToEntityList(rs);
                    }
                });
        return entitis;
    }

    /**
     * 将ResultSet转换成List
     * 
     * @param rs
     * @return
     */
    protected List<T> rsToEntityList(ResultSet rs)
    {
        List<T> entitis = new ArrayList<T>();
        if (rs != null)
        {
            try
            {
                while (rs.next())
                {
                    T entity = rsToEntity(rs);
                    entitis.add(entity);
                }
            }
            catch (Exception e)
            {
                LOGGER.error("Resultset转成实体出错", e);
            }
        }
        return entitis;
    }

    /**
     * 将resultset转为实体对象
     * 
     * @param rs
     * @return
     * @throws SQLException
     */
    protected abstract T rsToEntity(ResultSet rs) throws SQLException;
}
